// <auto-generated />
using System;
using EVENTS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EVENTS.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20221023121157_IntialMigration")]
    partial class IntialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("_EventsEventId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "_EventsEventId");

                    b.HasIndex("_EventsEventId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EVENTS.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("Catogories", "EC");
                });

            modelBuilder.Entity("EVENTS.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EventAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EventContent")
                        .HasColumnType("varchar(1000)");

                    b.Property<byte[]>("EventCoverphoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("albums")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("source")
                        .HasColumnType("varchar(250)");

                    b.HasKey("EventId");

                    b.HasIndex("SourceId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EVENTS.Models.Source", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SourceDescription")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SourceTitle")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("SourceId");

                    b.ToTable(" Sources", "EC");
                });

            modelBuilder.Entity("EVENTS.Models.album", b =>
                {
                    b.Property<int>("photoalbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Multiphotoalbums")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("photoalbumTitle")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("photoalbumId");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable(" photoalbums", "EC");
                });

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.HasOne("EVENTS.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVENTS.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("_EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EVENTS.Models.Event", b =>
                {
                    b.HasOne("EVENTS.Models.Source", null)
                        .WithMany("Events")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVENTS.Models.Source", "Sources")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("EVENTS.Models.album", b =>
                {
                    b.HasOne("EVENTS.Models.Event", "_Event")
                        .WithOne("Photoalbum")
                        .HasForeignKey("EVENTS.Models.album", "EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("_Event");
                });

            modelBuilder.Entity("EVENTS.Models.Event", b =>
                {
                    b.Navigation("Photoalbum");
                });

            modelBuilder.Entity("EVENTS.Models.Source", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
